functionalTestDirectory = "inst/functionalTests/")
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
View(funcInfo)
isTestable(funcInfo, funcName, functionalTestDirectory = "inst/functionalTests/")
funcName
funcInfo
## todo break into smaller functions
## todo - handle it at the R level if a required parameter is missing.
##     This should not happen when functions are called from Galaxy,
##     but will arise when functions are called from R.
galaxy <-
function(func,
package=getPackage(func),
manpage=func,
name=getFriendlyName(func),
version=getVersion(func),
galaxyConfig,
dirToRoxygenize,
RserveConnection=NULL,
path.to.R="",
functionalTestDirectory)
{
#    force(manpage)
if (is.function(func))
{
funcName <- deparse(substitute(func))
functionToGalaxify <- func
} else if (is.character(func)) {
funcName <- func
functionToGalaxify <- match.fun(func)
}
requiredFields <- c("func", "galaxyConfig")
missingFields <- character(0)
#    if (!missing(dirToRoxygenize))
#        roxygenize(dirToRoxygenize, roclets=("rd"))
for (requiredField in requiredFields)
{
is.missing <- do.call(missing, list(requiredField))
if (is.missing)
{
missingFields <- c(missingFields, requiredField)
}
}
if (length(missingFields)>0)
{
msg <- "The following missing fields are required: \n"
msg <- c(msg, paste(missingFields, collapse=", "))
gstop(msg)
}
rd <- getManPage(manpage, package)
title <- getTitle(rd)
fullToolDir <- file.path(galaxyConfig@galaxyHome, "tools",
galaxyConfig@toolDir)
dir.create(file.path(fullToolDir), recursive=TRUE, showWarnings=FALSE)
scriptFileName <-  file.path(fullToolDir, paste(funcName, ".R", sep=""))
funcInfo <- list()
if  (  length(names(formals(functionToGalaxify)))   > length(formals(functionToGalaxify)) )
gstop("All arguments to Galaxy must be named.")
for (param in names(formals(functionToGalaxify)))
funcInfo[[param]] <- getFuncInfo(functionToGalaxify, param)
# print(funcInfo)
print(funcName)
print(functionalTestDirectory)
print(package)
if (!isTestable(funcInfo, funcName, package, functionalTestDirectory))
gwarning("Not enough information to create a functional test.")
if (!suppressWarnings(any(lapply(funcInfo,
function(x)x$type=="GalaxyOutput"))))
{
gstop(paste("You must supply at least one GalaxyOutput",
"object."))
}
createScriptFile(scriptFileName, functionToGalaxify, funcName, funcInfo,
package, RserveConnection)
xmlFileName <- file.path(fullToolDir, paste(funcName, "xml", sep="."))
unlink(xmlFileName)
editToolConfXML(galaxyConfig@galaxyHome, galaxyConfig@sectionName,
galaxyConfig@sectionId, galaxyConfig@toolDir, funcName)
xml <- newXMLNode("tool")
xmlAttrs(xml)["id"]  <- funcName
if (!is.null(package))
version <- packageDescription(package)$Version
xmlAttrs(xml)["name"] <- name
xmlAttrs(xml)["version"] <- version
descNode <- newXMLNode("description", newXMLTextNode(title),
parent=xml)
commandText <- paste(funcName, ".R\n", sep="")
for (nm in names(funcInfo))
{
commandText <- paste(commandText, "       ",
sprintf("#if str($%s).strip() != \"\":\n", nm),
"          ", sprintf("--%s=\"$%s\"", nm, nm),
"\n       #end if\n",
sep="")
}
commandText <- paste(commandText, "2>&1", sep="\n")
commandNode <- newXMLNode("command", newXMLTextNode(commandText),
parent=xml)
rpath <- "Rscript"
if (path.to.R != "")
rpath <- file.path(path.expand(path.to.R), "bin", "Rscript")
xmlAttrs(commandNode)["interpreter"] <- sprintf("%s --vanilla", rpath)
inputsNode <- newXMLNode("inputs", parent=xml)
outputsNode <- newXMLNode("outputs", parent=xml)
if (isTestable(funcInfo, funcName, package))
testsNode <- newXMLNode("tests", parent=xml)
for (nm in names(funcInfo))
{
item <- funcInfo[nm][[1]]
galaxyItem <- eval(formals(functionToGalaxify)[nm][[1]])
if (!item$type == "GalaxyOutput")
{
paramNode <- newXMLNode("param", parent=inputsNode)
if (galaxyItem@required)
{
validatorNode <- newXMLNode("validator", parent=paramNode)
xmlAttrs(validatorNode)["type"] <- "empty_field"
xmlAttrs(validatorNode)["message"] <- galaxyItem@requiredMsg
xmlAttrs(paramNode)['optional'] <- 'false'
} else {
validatorNode <- newXMLNode("validator", parent=paramNode)
xmlAttrs(validatorNode)["type"] <- "empty_field"
##dummyParam <- GalaxyParam()
xmlAttrs(validatorNode)["message"] <-
galaxyItem@requiredMsg
xmlAttrs(paramNode)['optional'] <- 'true'
}
if (item$type == "GalaxyInputFile")
{
xmlAttrs(paramNode)["optional"] <-
tolower(
as.character(!eval(formals(functionToGalaxify)[[nm]])@required))
}
xmlAttrs(paramNode)["name"] <- nm
type <- RtoGalaxyTypeMap[[item$type]]
if (item$type == "GalaxyInputFile")
{
type <- "data"
if (length(galaxyItem@formatFilter))
xmlAttrs(paramNode)["format"] <- galaxyItem@formatFilter
else
xmlAttrs(paramNode)["format"] <- "data" #default format of an input file
}
if (item$length > 1 || "GalaxySelectParam" %in% class(galaxyItem))
{
type <- "select"
}
xmlAttrs(paramNode)["type"] <- type
if(!is.null(item$default))
xmlAttrs(paramNode)["value"] <- eval(item$default)
else
if (type %in% c("integer", "float"))
xmlAttrs(paramNode)["value"] <- ""
xmlAttrs(paramNode)["help"] <- getHelpFromText(rd, nm)
if (length(galaxyItem@label)) ## this really should always be true!
item$label <- galaxyItem@label
if ( galaxyItem@required){
item$label <- paste("[required]", item$label)
}
if (type == "boolean")
{
if (length(galaxyItem@checked))
xmlAttrs(paramNode)['checked'] <-
tolower(as.character(galaxyItem@checked))
}
if (type == "text") {
galaxyItem
if (length(galaxyItem@size))
xmlAttrs(paramNode)['size'] = as.character(galaxyItem@size)
}
if(type %in% c("integer", "float"))
{
if(length(galaxyItem@min))
xmlAttrs(paramNode)['min'] <- as.character(galaxyItem@min)
if(length(galaxyItem@max))
xmlAttrs(paramNode)['max'] <- as.character(galaxyItem@max)
}
xmlAttrs(paramNode)['label'] <- item$label
if (type=="select")
{
xmlAttrs(paramNode)['force_select'] <-
as.character(galaxyItem@force_select)
if (length(galaxyItem@display))
xmlAttrs(paramNode)['display'] <-
as.character(galaxyItem@display)
if (!is.null(item$selectoptions))
{
selectoptions <- eval(item$selectoptions)
idx <- 1
for (value in selectoptions)
{
option <- names(selectoptions)[[idx]]
if (is.null(option)) option <- value
optionNode <- newXMLNode("option", option,
parent=paramNode)
xmlAttrs(optionNode)['value'] <- value
idx <- idx + 1
}
}
}
invisible(NULL)
} else
{
dataNode <- newXMLNode("data", parent=outputsNode)
if (is.null(item$default))
gstop(sprintf("GalaxyOutput '%s' must have a parameter.", nm))
galaxyOutput <- eval(item$default)
xmlAttrs(dataNode)["format"] <- galaxyOutput@format
xmlAttrs(dataNode)["name"] <- nm
xmlAttrs(dataNode)["label"] <- as.character(galaxyOutput)
}
}
if (isTestable(funcInfo, funcName, package))
{
testDataDir <- file.path(galaxyConfig@galaxyHome, "test-data", funcName)
if (!file.exists(testDataDir))
dir.create(testDataDir)
#testFileDest <- file.path(funcName)
testNode <- newXMLNode("test", parent=testsNode)
for (info in funcInfo)
{
if (info$type == "GalaxyOutput")
testParamNode <- newXMLNode("output", parent=testNode)
else
testParamNode <- newXMLNode("param", parent=testNode)
xmlAttrs(testParamNode)["name"] <- info$param
if (length(info$type) > 0 &&
info$type %in% c("GalaxyInputFile", "GalaxyOutput"))
{
srcFile <- system.file("functionalTests", funcName, info$param,
package=package)
if (!file.exists(file.path(testDataDir, info$param)))
file.copy(srcFile, testDataDir)
xmlAttrs(testParamNode)["file"] <-
sprintf("%s/%s", funcName, info$param)
}
if (!is.null(info$testValues) && length(info$testValues) > 0)
{
## for now, just assume one value
xmlAttrs(testParamNode)['value'] <- info$testValues
}
}
}
helpText <- ""
helpText <- generateHelpText(rd)
helpNode <- newXMLNode("help", newXMLTextNode(helpText), parent=xml)
saveXML(xml, file=xmlFileName)
}
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
isTestable(funcInfo, "CsvToCsv", "MyGalaxyTools", "inst/functionalTests/")
install()
isTestable <- function(funcInfo, funcName, package, functionalTestDirectory)
{
testables <- logical(0)
for (info in funcInfo)
{
# print(info)
testable <- FALSE
if (!is.null(info$testValues) && length(info$testValues) > 0)
testable <- TRUE
if (length(info['type']) > 0 &&
info['type'] %in% c("GalaxyInputFile", "GalaxyOutput"))
{
# print(info)
if (missing(package) || is.null(package))
{
# print(info$param)
if (missing(functionalTestDirectory))
{
message(sprintf("Test directory '%s' missing", functionalTestDirectory))
testable <- FALSE
} else {
if (info$type == "GalaxyInputFile") {
testFile <- info$testValues
} else testFile <- eval(info)$default
testFile <- file.path(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
}
} else {
# print(info$param)
testFile <- system.file("functionalTests", funcName,
info$param, package=package)
print(testFile)
testable <- file.exists(testFile)
}
}
testables <- append(testables, testable)
}
all(testables)
}
isTestable(funcInfo, "CsvToCsv", "MyGalaxyTools", "inst/functionalTests/")
funcName
isTestable <- function(funcInfo, funcName, package, functionalTestDirectory)
{
testables <- logical(0)
for (info in funcInfo)
{
# print(info)
testable <- FALSE
if (!is.null(info$testValues) && length(info$testValues) > 0)
testable <- TRUE
if (length(info['type']) > 0 &&
info['type'] %in% c("GalaxyInputFile", "GalaxyOutput"))
{
# print(info)
if (missing(package) || is.null(package))
{
# print(info$param)
if (missing(functionalTestDirectory))
{
message(sprintf("Test directory '%s' missing", functionalTestDirectory))
testable <- FALSE
} else {
if (info$type == "GalaxyInputFile") {
testFile <- info$testValues
} else testFile <- eval(info)$default
testFile <- file.path(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
}
} else {
if (info$type == "GalaxyInputFile") {
testVals <- info$testValues
testFile <- ifelse(is.null(testVals), info$param, testVals)
} else testFile <- eval(info)$default
testFile <- file.path(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
testable <- file.exists(testFile)
}
}
testables <- append(testables, testable)
}
all(testables)
}
isTestable(funcInfo, "CsvToCsv", "MyGalaxyTools", "inst/functionalTests/")
library(RGalaxy)
library(MyGal)
library(MyGalaxyTools)
library(RGalaxy)
MakeGalaxyTool("CsvToCsv")
MakeGalaxyTool("CsvToCsv")
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = functionalTestDirectory)
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
isTestable <- function(funcInfo, funcName, package, functionalTestDirectory)
{
testables <- logical(0)
print(funcName)
print(package)
print(functionalTestDirectory)
for (info in funcInfo)
{
# print(info)
testable <- FALSE
if (!is.null(info$testValues) && length(info$testValues) > 0)
testable <- TRUE
if (length(info['type']) > 0 &&
info['type'] %in% c("GalaxyInputFile", "GalaxyOutput"))
{
# print(info)
if (missing(package) || is.null(package))
{
# print(info$param)
if (missing(functionalTestDirectory))
{
message(sprintf("Test directory '%s' missing", functionalTestDirectory))
testable <- FALSE
} else {
if (info$type == "GalaxyInputFile") {
testFile <- info$testValues
} else testFile <- eval(info)$default
testFile <- file.path(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
}
} else {
if (info$type == "GalaxyInputFile") {
testVals <- info$testValues
testFile <- ifelse(is.null(testVals), info$param, testVals)
} else testFile <- eval(info)$default
testFile <- system.file(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
testable <- file.exists(testFile)
}
}
testables <- append(testables, testable)
}
all(testables)
}
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = functionalTestDirectory)
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
galaxy("CsvToCsv", package = NULL,
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
isTestable <- function(funcInfo, funcName, package, functionalTestDirectory)
{
testables <- logical(0)
# print(funcName)
# print(package)
# print(functionalTestDirectory)
for (info in funcInfo)
{
# print(info)
testable <- FALSE
if (!is.null(info$testValues) && length(info$testValues) > 0)
testable <- TRUE
if (length(info['type']) > 0 &&
info['type'] %in% c("GalaxyInputFile", "GalaxyOutput"))
{
# print(info)
if (missing(package) || is.null(package))
{
# print(info$param)
if (missing(functionalTestDirectory))
{
message(sprintf("Test directory '%s' missing", functionalTestDirectory))
testable <- FALSE
} else {
if (info$type == "GalaxyInputFile") {
testFile <- info$testValues
} else testFile <- eval(info)$default
testFile <- file.path(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
}
} else {
if (info$type == "GalaxyInputFile") {
testVals <- info$testValues
testFile <- ifelse(is.null(testVals), info$param, testVals)
} else testFile <- eval(info)$default
testFile <- system.file(functionalTestDirectory, funcName)
testable <- file.exists(testFile)
testable <- file.exists(testFile)
}
}
testables <- append(testables, testable)
}
all(testables)
}
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
library(RGalaxy)
library(MyGalaxyTools)
MakeGalaxyTool("CsvToCsv")
library(RGalaxy)
MakeGalaxyTool("CsvToCsv")
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = functionalTestDirectory)
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = functionalTestDirectory)
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
galaxy
setwd("~/GitHub/RGalaxy")
install()
library(RGalaxy)
setwd("~/GitLab/Galaxy")
galaxy("CsvToCsv",
galaxyConfig=GalaxyConfig("inst/galaxy", "mytool",
"Local tools", "mytool"),
RserveConnection=NULL,
functionalTestDirectory = "inst/functionalTests/")
?galaxy
setwd("~/GitHub/RGalaxy")
library(devtools)
install()
install()
library(XML)
install.packages("XML")
install.packages("XML")
install()
devtools::install(0)
devtools::install()
